name: CI - Staging

on:
  push:
    branches:
      - staging
  pull_request:
    branches:
      - staging

env:
  ENV: staging
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  REPO_NAME: wasaa-admin-service # change this to the right repo name
  NODE_ENV: staging

jobs:
  build-test-analyze:
    runs-on: ubuntu-latest
    environment:
      name: staging
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies (with fallback)
        run: |
          if [ -f package-lock.json ]; then
            echo "Found package-lock.json, running npm ci..."
            npm ci
          else
            echo "No package-lock.json found. Running npm install with --legacy-peer-deps to resolve conflicts..."
            npm install --legacy-peer-deps
          fi

      - name: Check available scripts
        run: |
          echo "Available npm scripts:"
          npm run --silent
          echo "Package.json scripts section:"
          cat package.json | grep -A 20 '"scripts"'

      - name: Lint code
        run: |
          if npm run --silent | grep -q "lint"; then
            npm run lint
          else
            echo "Lint script not found, skipping..."
          fi

      - name: Run tests
        run: |
          if npm run --silent | grep -q "test:unit"; then
            npm run test:unit
          elif npm run --silent | grep -q "test"; then
            npm run test
          else
            echo "No test scripts found, skipping..."
          fi

      - name: Run integration tests
        run: |
          if npm run --silent | grep -q "test:integration"; then
            npm run test:integration
          else
            echo "Integration test script not found, skipping..."
          fi

      - name: Run end-to-end tests
        run: |
          if npm run --silent | grep -q "test:e2e"; then
            npm run test:e2e
          else
            echo "E2E test script not found, skipping..."
          fi

      - name: Code coverage report
        run: |
          if npm run --silent | grep -q "test:coverage"; then
            npm run test:coverage
          elif npm run --silent | grep -q "coverage"; then
            npm run coverage
          else
            echo "Coverage script not found, skipping..."
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: hashFiles('coverage/lcov.info') != ''
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Audit for outdated dependencies
        run: npm outdated || true

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('coverage/**') != ''
        with:
          name: test-results-${{ matrix.node-version }}
          path: coverage/

  build-and-push:
    needs: build-test-analyze
    runs-on: ubuntu-latest
    environment:
      name: staging
    permissions:
      id-token: write       # ðŸ‘ˆ Required for OIDC
      contents: read        # ðŸ‘ˆ Required to read code from repo

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract version details
        run: |
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "VERSION_TAG=${GITHUB_REF##*/}-$(date +%Y%m%d%H%M)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Ensure ECR repository exists
        run: |
          echo "Checking if ECR repo $REPO_NAME exists..."

          if ! aws ecr describe-repositories --repository-names "$REPO_NAME" --region ${{ secrets.AWS_REGION }} 2>/dev/null; then
            echo "ECR repo $REPO_NAME not found. Creating..."
            aws ecr create-repository \
              --repository-name "$REPO_NAME" \
              --image-scanning-configuration scanOnPush=true \
              --region ${{ secrets.AWS_REGION }}
          else
            echo "ECR repo $REPO_NAME already exists."
          fi

      - name: Build Docker image
        run: |
          docker build -t $ECR_REGISTRY/$REPO_NAME:${VERSION_TAG} .
          docker tag $ECR_REGISTRY/$REPO_NAME:${VERSION_TAG} $ECR_REGISTRY/$REPO_NAME:latest-${BRANCH_NAME}

      - name: Push Docker image to ECR
        run: |
          docker push $ECR_REGISTRY/$REPO_NAME:${VERSION_TAG}
          docker push $ECR_REGISTRY/$REPO_NAME:latest-${BRANCH_NAME}
